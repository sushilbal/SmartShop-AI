services:
  db:
    image: postgres:14-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - db_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - smartshop_net
  
  embedding_model:
    build:
      context: .
      dockerfile: ./embedding_service/Dockerfile
      args:
        MODEL_CACHE_FOLDER_ARG: ${MODEL_CACHE_FOLDER} # Pass .env variable as build arg
    restart: unless-stopped
    ports:
      - "8001:8001"
    environment:
      # Allow overriding the model name via .env file
      MODEL_CACHE_FOLDER: ${MODEL_CACHE_FOLDER} # Pass to container
      # Add PostgreSQL variables to satisfy config.py, even if not directly used by this service
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PYTHONPATH: /app  # Explicitly set PYTHONPATH
      RUNNING_IN_DOCKER: ${RUNNING_IN_DOCKER}
      SENTENCE_TRANSFORMER_MODEL: ${EMBEDDING_MODEL_NAME}
      VECTOR_DB_HOST: ${VECTOR_DB_HOST}
      EMBEDDING_SERVICE_URL: ${EMBEDDING_SERVICE_URL} 
      VECTOR_DB_PORT: ${VECTOR_DB_PORT}
    networks:
      - smartshop_net
    volumes:
      - ./config:/app/config # Mount the config directory
      - embedding_model_cache:${MODEL_CACHE_FOLDER} # Mount shared cache
    # Add healthcheck for embedding_model if you implement one in its FastAPI app

  vector_db: # <--- NEW QDRANT SERVICE
    build:
      context: . # Assumes qdrant.Dockerfile is in the project root
      dockerfile: qdrant.Dockerfile
    restart: unless-stopped
    ports: # Based on Qdrant 1.14.0 logs for this instance
      - "6333:6333"  # HTTP REST API port (web UI, /readyz)
      - "6334:6334"  # gRPC port for client communication
    volumes:
      - qdrant_storage:/qdrant/storage # To persist Qdrant data
    networks:
      - smartshop_net
    healthcheck: # Qdrant >= v1.2 uses /readyz
      test: ["CMD-SHELL", "curl -f --max-time 15 http://localhost:6333/readyz || exit 1"]
      interval: 20s     # Increased interval between checks
      timeout: 20s      # Increased timcleareout for Docker to wait for the command
      start_period: 180s # Increased to 3 minutes
      retries: 5

  
  db_init:
    build:
      context: .
      dockerfile: ./database/Dockerfile_init
    depends_on:
      db:
        condition: service_healthy
      vector_db:
        condition: service_healthy
    environment:
      # These match what config/config.py expects via os.getenv
      POSTGRES_HOST: db
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      # Allow overriding the sentence transformer model used by populate_db.py
      SENTENCE_TRANSFORMER_MODEL: ${EMBEDDING_MODEL_NAME}
      VECTOR_DB_HOST: ${VECTOR_DB_HOST}
      EMBEDDING_SERVICE_URL: ${EMBEDDING_SERVICE_URL}
      VECTOR_DB_PORT: 6333 # Override for db_init to use Qdrant's HTTP port
      MODEL_CACHE_FOLDER: ${MODEL_CACHE_FOLDER}
      RUNNING_IN_DOCKER: ${RUNNING_IN_DOCKER}
      PYTHONPATH: /app
    networks:
      - smartshop_net
    volumes:
      - ./scripts:/app/scripts
      - ./config:/app/config
      - ./database:/app/database # For init.sql
      - embedding_model_cache:${MODEL_CACHE_FOLDER} # Mount shared cache
      - ./data:/app/data
    command: ["python", "/app/scripts/populate_db.py"]

    
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    depends_on:
      db:
        condition: service_healthy
      embedding_model:
        condition: service_started # or service_healthy if you add a healthcheck
      vector_db:
        condition: service_healthy
    environment:
      # For database connection, matching what config/config.py expects
      POSTGRES_HOST: db
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      VECTOR_DB_HOST: vector_db # <--- Hostname for Qdrant
      VECTOR_DB_PORT: ${VECTOR_DB_PORT}  # <--- gRPC port for Qdrant
      EMBEDDING_SERVICE_URL: ${EMBEDDING_SERVICE_URL}
      MODEL_CACHE_FOLDER: ${MODEL_CACHE_FOLDER} # Pass to container (optional for backend, but good for consistency)
      OPENAI_API_KEY: ${OPENAI_API_KEY} 
      RUNNING_IN_DOCKER: ${RUNNING_IN_DOCKER}
      PYTHONPATH: /app # Assuming backend code is in /app/src and this helps imports
    ports:
      - "8000:8000"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s # Give backend time to initialize before first check
    networks:
      - smartshop_net
    volumes:
      - ./backend:/app
      - ./config:/app/config
      - embedding_model_cache:${MODEL_CACHE_FOLDER}

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "80:80"
    networks:
      - smartshop_net
    depends_on: # Updated to wait for backend to be healthy
      backend:
        condition: service_healthy

networks:
  smartshop_net:
    driver: bridge

volumes:
  db_data:
  qdrant_storage:
  embedding_model_cache: