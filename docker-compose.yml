services:
  db:
    image: postgres:14-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - db_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - smartshop_net
  
  embedding_model:
    build:
      context: .
      dockerfile: ./embedding_service/Dockerfile
      args:
        MODEL_CACHE_FOLDER_ARG: ${MODEL_CACHE_FOLDER} 
    restart: unless-stopped
    ports:
      - "8001:8001"
    environment:
      MODEL_CACHE_FOLDER: ${MODEL_CACHE_FOLDER} 
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PYTHONPATH: /app  
      RUNNING_IN_DOCKER: ${RUNNING_IN_DOCKER}
      SENTENCE_TRANSFORMER_MODEL: ${EMBEDDING_MODEL_NAME}
      VECTOR_DB_HOST: ${VECTOR_DB_HOST}
      EMBEDDING_SERVICE_URL: ${EMBEDDING_SERVICE_URL} 
      VECTOR_DB_PORT: ${VECTOR_DB_PORT}
    networks:
      - smartshop_net
    volumes:
      - ./config:/app/config 
      - embedding_model_cache:${MODEL_CACHE_FOLDER} 

  vector_db: 
    build:
      context: . 
      dockerfile: qdrant.Dockerfile
    restart: unless-stopped
    ports: 
      - "6333:6333"  
      - "6334:6334"  
    volumes:
      - qdrant_storage:/qdrant/storage 
    networks:
      - smartshop_net
    healthcheck: 
      test: ["CMD-SHELL", "curl -f --max-time 15 http://localhost:6333/readyz || exit 1"]
      interval: 20s     
      timeout: 20s      
      start_period: 60s 
      retries: 5

  
  db_init:
    build:
      context: .
      dockerfile: ./database/Dockerfile_init
    depends_on:
      db:
        condition: service_healthy
      vector_db:
        condition: service_healthy
    environment:
      
      POSTGRES_HOST: db
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      
      SENTENCE_TRANSFORMER_MODEL: ${EMBEDDING_MODEL_NAME}
      VECTOR_DB_HOST: ${VECTOR_DB_HOST}
      EMBEDDING_SERVICE_URL: ${EMBEDDING_SERVICE_URL}
      VECTOR_DB_PORT: 6333 
      MODEL_CACHE_FOLDER: ${MODEL_CACHE_FOLDER}
      RUNNING_IN_DOCKER: ${RUNNING_IN_DOCKER}
      PYTHONPATH: /app
    networks:
      - smartshop_net
    volumes:
      - ./scripts:/app/scripts
      - ./config:/app/config
      - ./database:/app/database 
      - embedding_model_cache:${MODEL_CACHE_FOLDER} 
      - ./data:/app/data
    command: ["python", "/app/scripts/populate_db.py"]

    
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    depends_on:
      db:
        condition: service_healthy
      embedding_model:
        condition: service_started 
      vector_db:
        condition: service_healthy
    environment:
      
      POSTGRES_HOST: db
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      VECTOR_DB_HOST: vector_db 
      VECTOR_DB_PORT: 6334  
      EMBEDDING_SERVICE_URL: ${EMBEDDING_SERVICE_URL}
      MODEL_CACHE_FOLDER: ${MODEL_CACHE_FOLDER} 
      OPENAI_API_KEY: ${OPENAI_API_KEY} 
      RUNNING_IN_DOCKER: ${RUNNING_IN_DOCKER}
      PYTHONPATH: /app 
    ports:
      - "8000:8000"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s 
    networks:
      - smartshop_net
    volumes:
      - ./backend:/app
      - ./config:/app/config
      - embedding_model_cache:${MODEL_CACHE_FOLDER}
  
  redis: 
    image: redis:7-alpine
    restart: unless-stopped
    ports:
      - "6379:6379" 
    volumes:
      - redis_data:/data 
    networks:
      - smartshop_net
    

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "80:80"
    networks:
      - smartshop_net
    depends_on: 
      backend:
        condition: service_healthy

networks:
  smartshop_net:
    driver: bridge

volumes:
  db_data:
  qdrant_storage:
  embedding_model_cache:
  redis_data: 